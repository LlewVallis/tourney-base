generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Tourney {
  id       String   @id @default(cuid())
  ownerId  String
  name     String
  created  DateTime @default(now())
  modified DateTime @default(now())

  participants Participant[]
  matchResults MatchResult[]

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Participant {
  id        String   @id @default(cuid())
  tourneyId String
  name      String
  index     Int
  created   DateTime @default(now())

  winningMatches MatchResult[] @relation("WinningMatches")
  losingMatches  MatchResult[] @relation("LosingMatches")

  tourney Tourney @relation(fields: [tourneyId], references: [id], onDelete: Cascade)
}

model MatchResult {
  id        String   @id @default(cuid())
  tourneyId String
  winnerId  String
  loserId   String
  created   DateTime @default(now())

  tourney Tourney     @relation(fields: [tourneyId], references: [id], onDelete: Cascade)
  winner  Participant @relation("WinningMatches", fields: [winnerId], references: [id], onDelete: Cascade)
  loser   Participant @relation("LosingMatches", fields: [loserId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  tourneys Tourney[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refreshToken")
  access_token       String? @map("accessToken")
  expires_at         Int?    @map("expiresAt")
  token_type         String? @map("tokenType")
  scope              String?
  id_token           String? @map("idToken")
  session_state      String? @map("sessionState")
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token        String? @map("oauthToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
